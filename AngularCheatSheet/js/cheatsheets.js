Array.prototype.clone = function() {
	return this.slice(0);
};

angular.module('CheatSheetApp', [])
  .controller('SheetController', function() {
    var sheetManager = this;

    sheetManager.SheetEnum = {
      html : 1,
      css: 2,
      javascript: 3,
      jQuery: 4,
      angular: 5,
      python: 6,
      cSharp: 7,
      markdown: 8,
      sheets: {
        1: {name: "HTML",
            sheet: {
              "<html>" : "This tag indicates that it contains HTML code.",
              "<meta>" : "Contains information about the page. Is placed in the head. Can be used for SEO. The 'name' attribute specifies something to be described by 'content'. For example, description, keywords, and robots(noindex for no search indexing, nofollow for no indexing of pages that this page links to). The 'http-equiv' attribute works the same, with author, pragma(no-cache), and expires(with a date.)",
              "<title>" : "The title of the page, which is displayed on the tab or window which it is being viewed in.",
              "<link>" : "A link to a css file, using 'href' to reference the file location. 'rel' should be 'stylesheet'. 'type' can be 'text/css', but not necessary",
              "<script>" : "A link to a script, using src. Alternately, javascript can be inserted in between the opening and closing tags. 'type' is often specified.",
              "<head>" : "Contains information about the page. Usually includes scripts and styles.",
              "<body>" : "This element contains what will be displayed in the main browser window.",
              "<div>" : "An unstyled, unopinionated element. Typically used for structuring a page and add css styles in specific places.",
              "<header>" : "Used to define the header of a page.",
              "<footer>" : "Used to define the footer of a page.",
              "<main>" : "Used to define the main part of a page.",
              "<section>" : "Used to define a section of a page.",
              "<article>" : "Used to define an article of a page.",
              "<figure>" : "Provides a space to insert images and a caption. Is usually indented. Can contain an infinite amount of imgs, figcaptions, and so on.",
              "<figcaption>" : "A caption to be used inside a figure.",
              "<img>" : "The image tag. It is used to create images. Images are inline. Attributes: 'alt' describes the img to a screen reader. The 'title' tooltip appears when the image is moused over. 'srcset' specifies other images for different device sizes, ie, 2x. jpegs for many colours & photos, gifs or pngs for illustrations of mostly 1 or 2 colours.",
              "<picture>" : "Used to contain multiple sources for an image. For example, it may contain an <img> and multiple <source> elements.",
              "<span>" : "An inline element. Usually used for styling text.",
              "<p>" : "A paragraph of text. Starts on a new line and there is space below and above it.",
              "<a>" : "The anchor tag. It is used to create hyperlinks, defined by the 'href' attribute, for accessing other webpages, places on the page, or e-mail addresses. Link text is placed between the opening and closing tags. Blue and underline by default. Absolute links need full domain. Relative only need page location('../ links to parent folder items.'). 'mailto:' is used to open up an email. 'target=\"_blank\" opens in a new window.' Can jump to an id by using href='#ID_NAME' or href='PAGE_URL/#ID_NAME'.",
              "Note:" : "URL means Universal Resource Locator.",
              "<hX>" : "A heading. The largest is the main heading, <h1>, decreasing down to <h6>. Have top and bottom margins.",
              "<b>" : "Make text bold, structurally.",
              "<strong>" : "Make text bold/strong, semantically.",
              "<i>" : "Make text italic, structurally.",
              "<em>" : "Make text italic/emphasized, semantically.",
              "<sup>" : "Make text superscript.",
              "<sub>" : "Make text subscript.",
              "<br>" : "Adds a line break.",
              "<hr>" : "A horizontal rule.",
              "<blockquote>" : "Block indents a large quote.",
              "<q>" : "Places quotation marks around a quote. However, IE doesn't do so, so it is inadvisable to use.",
              "<abbr>" : "Signifies an abbreviation, with the 'title' attribute signifying what it is short for. (Was <acronym> in html4.)",
              "<cite>" : "Indicates a citation. Usually rendered as italic by browsers.",
              "<dfn>" : "Indicates a definition which is being defined by the text after or surrounding it. Shown in italics in most browsers.",
              "<address>" : "Indicates a physical or email address. Usually rendered in italics. Related to hCards.",
              "<del>" : "Indicates that its text has been deleted. Usually shown as strikethrough text.",
              "<ins>" : "Indicates that its text has been inserted(for example, to replace the <del> text.) Usually shwown as underlined(replaced <u>).",
              "<s>" : "Indicates that something is no longer accurate or relevant(but that should not be deleted.) Shown typically as strikethrough text.",
              "<ol>" : "Contains an ordered(numbered) list of <li> items. Automatically indented. A useful css style is 'list-style-type.' Can be nested.",
              "<ul>" : "Contains an unordered list of <li> items, which are bulleted. Automatically indented. A useful css style is 'list-style-type.' Can be nested. Is a block element.",
              "<li>" : "An individual list item inside of an <ol> or <ul>. Is a block element.",
              "<dl>" : "Contains a definition list of <dt> and <dd> items. Can be nested.",
              "<dt>" : "Is a definition term in a definition list. It is not indented.",
              "<dd>" : "Is a definition in a definition list. It is indented.",
              "<table>" : "Contains a table, which is made up of <tr> rows and <td> cells, among other elements.",
              "<tr>" : "Defines a row in a <table>. Can contain <td> and <th> elements.",
              "<td>" : "Defines a cell in a <tr> row. colspan='X' will cause the cell to span X columns of the table. rowspan='Y' will do the same for rows.",
              "<th>" : "Defines a table heading cell. That is, it can be used for a row or column heading. Text content is usually displayed as bold and centered in the cell. colspan='X' will cause the cell to span X columns of the table. rowspan='Y' will do the same for rows. scope='col or row' indicates if it is col or row.",
              "<thead>" : "Contains the head of a table.",
              "<tbody>" : "Contains the body of a table.",
              "<tfoot>" : "Contains the foot of a table.",
              "<form>" : "Defines a form. Includes <input>, <label>, and other form elements. Will typically contain an 'action' attribute, which specifies the server page which recieves the input. 'method' takes on the value 'get'(for small inputs) or 'post'(for large or database read/write inputs). Specifying an id can be useful for scripts.",
              "<input>" : "Is used to create a form control. Can take on many types, defined by 'type': text, password, radio, checkbox, file, submit, image, hidden, date, email, url, search, button, etc. The 'name' attribute is essentially the key/variable that the input data is assigned to. Other attributes: 'maxlength', 'value', 'checked', 'required', 'placeholder' apply depending on 'type'.",
              "<textarea>" : "Is essentially a 'text' <input> with multiple lines. Takes 'name', 'cols', and 'rows' attritbutes(the latter two used to define its size.) Has a closing tag; the text inside is the value displayed initially.",
              "<select>" : "Defines a drop down list box / select box, filled with <option> elements which represent the possible choices. Uses a 'name' attribute. The first <option> is the default value. 'size' decides how many options are shown at once. 'multiple' allows the user to select as many options as they want(using command/ctrl).",
              "<option>" : "An option in the select box. 'value' defines value. The text between the opening and closing tags is the name shown to user. 'selected' indicates an option is already selected.",
              "<button>" : "Allows you to place text and images between the opening and closing tags, to create a customized button.",
              "<label>" : "A simple way to organize your inputs. Surround the <input> and text label, or surround the text label and specify which input it is paired with using the 'for' attr to specify the id of its input.",
              "<fieldset>" : "A border which groups a set of form or input elements together. If a <legend> element is a child, it will show as the title at the top of the border.",
              "<legend>" : "The title of its parent fieldset.",
              "<iframe>" : "Defines an inline frame, that is, another webpage inlined into the page. 'src' specifies the URL. 'width', 'height', 'allowfullscreen', and 'seamless' are useful attributes.",
              "<video>" : "Creates an embedded video from the given 'src', with the poster image 'poster'. width, height, controls, loop, autoplay, and preload(none, auto, or metadata) are other attributes. Text or images placed between the opening and closing tags will be displayed if the browser does not support html5.",
              "<source>" : "Allow the src attribute to be externalized for img and video tags. Instead, the src can be written in the source, and multiple sources can be provided. Typically the first source will be used by default. type can be a useful attribute for videos.",
              "<audio>" : "An embedded audio player. src, controls, autoplay, preload, loop are attributes. Can also use <source>.",
              "<style>" : "Between the closing and opening brackets, the styles written behave as if they were linked from another css file. That is, the cascade down. 'type' should be specified as 'text/css'.",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "BLOCK ELEMENTS" : "<h1>, <p>, <ul>, <li>,...",
              "INLINE ELEMENTS" : "<a>, <b>, <img>, <em>, <span>, ...",
              "" : "",
              "" : ""
            }
          },
        2: {name: "CSS",
            sheet: {
              "FONTS" : "The following styles directly affect the font and its appearance. For example, when bold is specified the font's pre-designed bold version is used.",
              "font-size" : "Sets the font size. The units px, pt(for printing), %, and em(size of an m) can be used. 16px is the default unstyled size.",
              "font-family" : "Allows you to set the font used in the element. It is possible to specify several options, separated by commas(called a font stack.) Use double quotes: \"Courier New\" for fonts of two or more words. ",
              "font-style" : "Lets you set the style of the font, ie, normal, italic, oblique(normal tilted).",
              "font-weight" : "Lets you set the bold level of text. Ie, bold, bolder, normal, lighter, black, or numbers ie, 700, 400, 200.",
              "font-stretch" : "Defines the horizontal scaling of the font. Common values are: condensed, regular, normal, extended, extra-extended, ultra-extended, etc. ",
              "@font-face" : "Allows a font to be downloaded to the users machine. font-family sets the name of the imported font, and 'src' links to the font file: 'url('...')format('...')'. Multiple files(eot, woff, ttf/otf, svg) should be included.",
              "TEXT" : "The following styles have the same effect on all text, regardless of its font.",
              "text-decoration" : "Lets you set the decoration, ie, the underline, strikethrough, etc.",
              "text-transform" : "Lets you choose if the text is uppercase, lowercase, or capitalized.",
              "text-align" : "Allows you to specify the alignment of the text, ie, left, right, center, justified.",
              "line-height" : "Let's you specify the height of the lines in the text.",
              "color" : "Sets the color of the font in this element.",
              "list-style-type" : "With this you can specify how the bullets in an html list appear.",
              "display:" : "With this you can set the display to flex, block, or other settings. It affects how elements within this element flow. Ie, if they wrap or are in the same block.",
              "flex-wrap:" : "Let's you decide if the flex elements wrap around or not.",
              "flex-flow" : "",
              "flex-grow" : "",
              "row nowrap" : "",
              "overflow-x: auto" : "Creates a side scrolly bar if the height of the element exceeds the height of its containing element.",
              "position: absolute" : "Sets the element to stay in place, regardless of where other elements are oriented, or what they are doing. Ie, an icon locked in the corner even if the page itself is scrolling.",
              "position: relative" : "",
              "transform: translate(x,y)" : "",
              "width, min-width, max-width" : "Self explanatory, really.",
              "height, min-height, max-height" : "",
              "calc((100%-10px)/2)" : "Will return a size to be used as an argument in a CSS rule. Can mix %, px, em, etc.",
              "margin, margin-top, etc." : "Will set the amount of spacing around the outside of the element. That is, relative to surrounding elements and their margins/paddings.",
              "padding, padding-top, etc." : "Will set the amount of spacing inside the element. That is the spacing between the edge of the element's 'box', and the filling inside.",
              "background: url()" : "",
              "background-image: url()" : "",
              "background-repeat:" : "",
              "background-size" : "",
              "background-color" : "Sets the background colour of the element. Transparent by default.",
              "opacity" : "A value between 0 and 1.0, with 1.0 being transparent. Applies to the background of the element.",
              "cursor:" : "Changes how the pointer appears when hovering over the element. Ie, a pointer is the hand.",
              "SPECIFYING COLOR" : "1.) RGB Values: rgb(x,y,z); {0 <= x, y, z <= 255.} 2.) RGBA Values: rgba(x,y,z,a); {0 <= x, y, z <= 255.}, {0<= a <= 1.0}. 3.) HEX Codes: #xxyyzz; or #xyz. 4.) Color Names: Black. 5.) HSLA(Hue, Saturation, Lightness, Alpha): hsl(0,0%,78%0); or hsla(0,0%,78%,0); Hue is a circle, with 0 and 360 degrees being Red.",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "orphans" : "",
              "widows" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "---" : "---- SELECTORS ----",
              "* {}" : "The universal selector. Applies to all elements in the document.",
              "h1 {}" : "Type selector. Matches element names. ",
              ".note {}" : "Class selector. Matches an element whose class attribute has a value that matches the one after the period symbol.",
              "p.note {}" : "Class selector refinement. Targets only <p> elements whose class attribute has a value of note.",
              "#intro {}" : "Id selector. Matches the element with the class value which equals the value after the #.",
              "li>a {}" : "Child selector. Matches an element that is a direct child of another. For example, this only matches <a> elements which are children of an <li> element(but not other <a> elements in the page.)",
              "li a {}" : "Descendant selector. Matches an element that is a descendant of another specified element(not just a direct child of that element.) Ex: this targets all <a> elements nested inside of <li> elements, evenf there are other elements nested between them.",
              "h1+p {}" : "Adjacent sibling selector. Matches an element that is the next sibling of another(under the same parent). Ex: this targets the first <p> element after any <h1> element, but not other <p> elements.",
              "h1~p {}" : "General sibling selector. Matches any sibling element of another - does not have to be adjacent(can match more than one element.) Ex: this would target any p elements which are siblings of any h1 element.",
              "" : "",
              "Precedence of styles." : "Last rule over earlier rules. Specific rules over general rules. color: blue !important; will override all other rules.",
              "Inherited properties" : "Most text properties, ...",
              "Not inherited properties" : "Note that these can be forced to be inherited like 'padding: inherit;'. border, background-color, padding, ..."
            }
          },
        3: {name: "Javascript",
            sheet: {
              "this" : "",
              "Object.create(object)" : "",
              "object.call(prototype)" : "",
              "object.prototype" : "",
              "prototype.constructor" : "",
              "new" : "",
              "var" : "",
              "object.proprerty notation" : "",
              "var x = function() {}" : "",
              "if () {} else {}" : "",
              "for (index = 0; index < value; index++) {}" : "",
              "array.slice()" : "",
              "array.splice()" : "",
              "array.push()" : "",
              "array.length" : "",
              "array.map(someFunc(), array)" : "Returns a new array resulting from applying someFunc() iteratively to every element in the old array. A good usage could be for Number() to convert all string elements to numbers.",
              "" : "",
              "" : "",
              "Math.max(int1, int2)" : "Returns the largest integer out of all the arguments passed to the function. Math.min() is of course the analog for finding the minimum.",
              "Number()" : "A global function(applies to all objects). Returns the value of the object as a number. Most commonly used for strings.",
              "String()" : "Converts the objects value to a string.",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : ""
            }
          },
        4: {name: "JQuery",
            sheet: {
              " $" : "",
              " $().append() or $().prepend()" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : ""
            }
          },
        5: {name: "AngularJS",
            sheet: {
              "{{expression}}" : "Interpolation symbols: One-way binding to the View. That is, the expression or variable(in the model) cannot be modified by the user directly in the View UI. Can be used in classes: class='cls-{{variable}}', and as attributes: <div {{attrName}} = 'attrValue'",
              " " : "> Directives:",
              "ng-app" : "Labels everything within the element as part of an Angular app. That is, you can bind controllers and modules within it now.",
              "ng-controller" : "Links/sets the controller to be used within the html element/view.",
              "ng-submit" : "Calls the specified function when the form/input is submitted. Use this when the user must present 'Enter' or press a submit button in order for the value to change.",
              "ng-repeat" : "Iteratively generates the element, repeating over the defined data structure.",
              "ng-show" : "When the assigned expression returns true, the element is shown. Otherwise, it's not. Use a boolean expression as here.",
              "ng-model" : "Creates a two-way binding between the element and the specified variable. When used in an <input> tag, it sets the value attribute of the element.",
              "ng-click" : "On a mouseclick, the given function/method is called.",
              "ng-src" : "Sets the src of an img tag. Can take inerpolated expressions.",
              "" : "",
              "Notes on expressions:" : "All are possible: {{property}}, {{testMethod()}}, {{property1 >=0? 'positive': 'negative', x=testMethod()}} [doesn't return anything, is purely an assignment expression.], {{x=testMethod(); y=testMethod()}}. But, if an expression starts to become complex, move it into a controller function.",
              "More:" : "Also, note: 1.) Expressions are evaluated against a scope object, not the global window. 2.) Undefined expressions return undefined or null. 3.) No control flow statements are allowed. 4.) You can use filters.",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "  " : "> Javascript:",
              "angular.module(name, [])" : "Defines an app module labelled name(string), with the module dependencies as the second argument.",
              "angular.module(name, []).controller(name, function)" : "Assigns the controller of the module to a name and controller implementation(a function). Often used to define the module and the controller in one fell sweep.",
              "angular.module(name)" : "Calls an existing module of name 'name'. Note the subtle difference - the lack of an array argument.",
              "" : "",
              "" : "",
              "" : ""
            }
          },
        6: {name: "Python",
            sheet: {
              "print()" : "Prints the string argument to console.",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : ""
            }
          },
        7: {name: "C#/Unity",
            sheet: {
              "Awake()" : "",
              "Start()" : "",
              "Update()" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : "",
              "" : ""
            }
          },
        8: {name: "Markdown",
            sheet: {
              "[text](url)" : "Let's you link to a url with the text being what is rendered in the markdown.",
              "**text**" : "",
              "_text_" : "",
              "'code'" : "",
              "```code block```" : "",
              "> quote" : "",
              "#, ##, ..., ######" : "",
              "-text or *text" : "",
              "-[x]text or -[ ]text" : "",
              "1. text" : "",
              "@user" : "",
              "" : "",
              "" : "",
              "" : ""
            }
          },
      }
    };

    sheetManager.currentSheet = sheetManager.SheetEnum.html;

    sheetManager.switchSheet = function(newSheet) {
      sheetManager.currentSheet = sheetManager.SheetEnum[newSheet];
    }

  });
